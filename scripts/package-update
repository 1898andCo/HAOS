#!/bin/bash
set -e

cd $(dirname $0)/..

echo "Creating Update Packages"
# Create Directories
mkdir -p $(pwd)/build/updates/amd64
mkdir -p $(pwd)/build/updates/amd64-vm
PACK=$(pwd)/build/updates
DIST=$(pwd)/dist/artifacts
SEASCRIPT=./scripts/sea_scripts


# CP OS Update files to staging - amd64
#cp "${DIST}/haos-initrd-amd64" "${PACK}/amd64"
#cp "${DIST}/haos-kernel-amd64.squashfs" "${PACK}/amd64"
cp "${DIST}/haos-rootfs-amd64.tar.gz" "${PACK}/amd64"
#cp "${DIST}/haos-kernel-version-amd64" "${PACK}/amd64"
#cp "${DIST}/haos-version-amd64" "${PACK}/amd64"

# CP OS Update files to staging - amd64-vm
#cp "${DIST}/haos-initrd-amd64" "${PACK}/amd64-vm"
#cp "${DIST}/haos-kernel-vm-amd64.squashfs" "${PACK}/amd64-vm/haos-kernel-amd64.squashfs"
cp "${DIST}/haos-rootfs-amd64.tar.gz" "${PACK}/amd64-vm" # TODO: this needs to be reviewed. It will contain the firmware that we remove for vm versions
                                                         # TODO: This applies to the dockerhub haos, we need to generate a vm version
#cp "${DIST}/haos-kernel-version-amd64" "${PACK}/amd64-vm"
#cp "${DIST}/haos-version-amd64" "${PACK}/amd64-vm"

# CP Installation Script
cp "${SEASCRIPT}/run_update2" "${PACK}/amd64"
cp "${SEASCRIPT}/run_update2" "${PACK}/amd64-vm"

# Pack Update
makeself.sh --sha256 --nomd5 --notemp "${PACK}/amd64" "${DIST}/update-amd64.run" "Update installer for AMD64 Systems" ./run_update
makeself.sh --sha256 --nomd5 --notemp "${PACK}/amd64-vm" "${DIST}/update-vm-amd64.run" "Update installer for AMD64 Virtual Systems" ./run_update

